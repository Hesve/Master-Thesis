library(ctsCausal)
library(SuperLearner)
library(earth)
library(sets)
library(ctsCausal)
n <- 1000
W <- data.frame(W1 = runif(n))
Z <- rbinom(n, size = 1, prob = 1/(1 + exp(2-W$W1)))
A <- (1-Z) * rnorm(n, mean = W$W1, sd = abs(1 + W$W1))
Y <- rexp(n, rate = 1+abs(W$W1 * A))
causalNullTest(Y, A, W, p = c(1,2,Inf), control = list(cross.fit = FALSE, verbose=TRUE, g.n.bins = 2:5))
debug(causalNullTest)
undebug(causalNullTest)
set(seed = 123)
res <- causalNullTest(Y, A, W, p = c(1,2,Inf), control = list(cross.fit = FALSE, verbose=TRUE, g.n.bins = 2:5))
View(res)
causalNullTest(Y, A, W, p = c(1,2,Inf), control = list(cross.fit = FALSE, verbose=TRUE, g.n.bins = 2:5))
debug(causalNullTest)
res <- causalNullTest(Y, A, W, p = c(1,2,Inf), control = list(cross.fit = FALSE, verbose=TRUE, g.n.bins = 2:5))
deb
superl
cmds
View(g.fit)
control$mu.SL.library
res <- causalNullTest(Y, A, W, p = c(1,2,Inf), control = list(cross.fit = FALSE, verbose=TRUE, g.n.bins = 2:5))
mu.fit
debug(cmdSuperLearner)
debug(cmdSuperLearner.onebin)
SL.library
SL.ear
library(np)
npreg
install.package("drc")
install.packages("drc")
library(drc)
drc
library(np)
ss
library(ctsCausal)
causalNullTest()
causalNullTest
debug(causalNullTest)
n <- 1000
W <- data.frame(W1 = runif(n))
Z <- rbinom(n, size = 1, prob = 1/(1 + exp(2-W$W1)))
A <- (1-Z) * rnorm(n, mean = W$W1, sd = abs(1 + W$W1))
Y <- rexp(n, rate = 1+abs(W$W1 * A))
Z
Y <- rexp(n, rate = 1+abs(W$W1 * A))
Zlibrary(ctsCausal)
set.seed(1337)
res <- causalNullTest(Y, A, W, p = c(1,2,Inf), control = list(cross.fit = FALSE, verbose=TRUE, g.n.bins = 2:5))
control$cross.fit
res <- causalNullTest(Y, A, W, p = c(1,2,Inf), control = list(cross.fit = TRUE, verbose=TRUE, g.n.bins = 2:5))
control
control
control
control$folds
control$cross.fit
res <- causalNullTest(Y, A, W, p = c(1,2,Inf), control = list(cross.fit = TRUE, verbose=TRUE, g.n.bins = 2:5))
library(tidyverse)
library(forecast)
library(stats)
library(psych)
library(xtable)
library(tseres)
library(parallel)
library(tseries)
library(ctsCausal)
source("functions.R")
load("data.RData")
library(tidyverse)
library(forecast)
library(stats)
library(psych)
library(xtable)
library(tseres)
setwd("G:/Min enhet/GitHub/Thesis")
source("functions.R")
load("data.RData")
psych::describe(data)[-c(1:3),-c(1,6,7,10,13)] %>% #exclude date as first row as well as some redundant columns
xtable(caption="Summary statistics for the different variables",
label="summary_table", digits=c(0,0, rep(2, ncol(.)-1))) %>%
print(caption.placement="top", table.placement="H")
swe_formula <- swe_KPIF ~ swe_interest + swe_unemployment
diff_data <- apply(data[,-(1)], 2, FUN= function(x) diff(x,1))
diff_data <- tibble(data.frame(data$Date[-1], diff_data))
colnames(diff_data) <- colnames(data)
#adf_tests for test_data
do.call(rbind, apply(diff_data[,-1], 2, adf.test, k=12))
swe_formula_unconditional <- swe_KPIF ~ swe_interest
swe_diff_np <- np_parallel(formula=swe_formula, lag_var1 = "swe_interest", lag_var2 = "swe_unemployment",
lags1= c(1:3), lags2=c(1:3),
replace_lag_0 = TRUE, data=diff_data, regtype="ll")
swe_diff_np_lc <- np_parallel(formula=swe_formula, lag_var1 = "swe_interest", lag_var2 = "swe_unemployment",
lags1= c(1:3), lags2=c(1:3),
replace_lag_0 = TRUE, data=diff_data, regtype="lc")
swe_diff_unconditional <- np_parallel(formula=swe_formula_unconditional, lag_var1 = "swe_interest", lag_var2 = "swe_unemployment",
lags1= c(1:3), lags2=c(1:3),
replace_lag_0 = TRUE, data=diff_data, regtype="ll")
swe_diff_unconditional_lc <- np_parallel(formula=swe_formula_unconditional, lag_var1 = "swe_interest", lag_var2 = "swe_unemployment",
lags1= c(1:3), lags2=c(1:3),
replace_lag_0 = TRUE, data=diff_data, regtype="lc")
lapply(swe_diff_np, np.plot)
lapply(swe_diff_np, np_plot)
lapply(swe_diff_np, np.plot)
View(swe_diff_np)
lapply(swe_diff_np_lc, np.plot)
lapply(swe_diff_np, np.summary)
lapply(swe_diff_np_lc, FUN=function(x) np.summary(x$model, view="fixed", theta=seq(0,35,5), phi=seq(0,35,5)))
lapply(swe_diff_np_lc, FUN=function(x) np.plot(x$model, view="fixed", theta=seq(0,35,5), phi=seq(0,35,5)))
lapply(swe_diff_np_lc, FUN=function(x) np.plot(x$model, view="fixed", theta=seq(0,35,5), phi=seq(0,35,5)))
np.plot(swe_tests_diff, view="fixed", theta=seq(0,35,5), phi=seq(0,35,5))
np.plot(swe_diff_np, view="fixed", theta=seq(0,35,5), phi=seq(0,35,5))
View(swe_diff_np)
np.plot(swe_diff_np$`swe_unemployment lag = 1`)
library(tidyverse)
library(forecast)
library(stats)
library(psych)
library(xtable)
library(tseres)
np.plot(swe_diff_np$`swe_unemployment lag = 1`)
library(magrittr)
np.plot(swe_diff_np$`swe_unemployment lag = 1`)
library(tidyverse)
np.plot(swe_diff_np$`swe_unemployment lag = 1`)
#causal null tests
set.seed(1337)
swe_tests_diff <- causal_null_parallel(Y = diff_data$swe_KPIF, A=diff_data$swe_interest, W=diff_data$swe_unemployment,
lags = c(0:3), control = list(cross.fit = TRUE, verbose=TRUE), p=Inf)
#parallel version of the causall_null_multi function
causal_null_parallel <- function(Y, A, W, lags, control = list(cross.fit = FALSE,
verbose=TRUE, g.n.bins = 2:5), p=2){
n_cores <- parallel::detectCores()- 1 #saving 1 core for OS
print("cores done")
cl <- makeCluster(n_cores)
clusterExport(cl, c("Y", "A", "W", "lags", "control", "p"), envir=environment())
print("export done")
clusterEvalQ(cl, {
library(tidyverse)
library(ctsCausal)
source("functions.R") # Ensure this file is in the working directory
})
print("starting parsapply")
results_list <- parSapply(cl, lags, FUN=function(lag){
res <- causal_wrapper(Y, A, W, lag, control, p=p)
names(res) <- paste("lag", lag)
return(res)},
simplify=FALSE)
names(results_list) <- paste("lag", lags)
stopCluster(cl)
return(results_list)
}
swe_tests_diff
set.sed(1337)
swe_test_diff2 <- causal_null_parallel(Y = diff_data$swe_CPI, A=diff_data$swe_interest, W=diff_data$swe_unemployment,
lags = c(0:3), control = list(cross.fit = TRUE, verbose=TRUE), p=Inf)
swe_test_diff2
set.sed(1337)
us_tests_diff <- causal_null_parallel(Y = diff_data$us_PCE, A=diff_data$us_interest, W=diff_data$us_unemployment,
lags = c(0:12), control = list(cross.fit = TRUE, verbose=TRUE), p=Inf)
us_tests_diff
set.seed(1337)
us_tests_diff2 <- causal_null_parallel(Y = diff_data$us_PCE, A=diff_data$us_interest, W=diff_data$us_unemployment,
lags = c(0:6), control = list(cross.fit = TRUE, verbose=TRUE), p=Inf)
set.seed(1337)
swe_test_diff2 <- causal_null_parallel(Y = diff_data$swe_CPI, A=diff_data$swe_interest, W=diff_data$swe_unemployment,
lags = c(0:6), control = list(cross.fit = TRUE, verbose=TRUE), p=Inf)
set.seed(1337)
us_tests_diff <- causal_null_parallel(Y = diff_data$us_PCE, A=diff_data$us_interest, W=diff_data$us_unemployment,
lags = c(0:3), control = list(cross.fit = TRUE, verbose=TRUE), p=Inf)
us_tests_diff
set.seed(1337)
us_tests_diff <- causal_null_parallel(Y = diff_data$us_PCE, A=diff_data$us_interest, W=diff_data$us_unemployment,
lags = c(0:3), control = list(cross.fit = TRUE, verbose=TRUE), p=Inf)
us_tests_diff
us_tests_diff
swe_tests_diff
swe_diff_np <- np_parallel(formula=swe_formula, lag_var1 = "swe_interest", lag_var2 = "swe_unemployment",
lags1= c(1:3), lags2=c(1:3),
replace_lag_0 = TRUE, data=diff_data, regtype="ll")
#adf_tests for diff_data
do.call(rbind, apply(diff_data[,-1], 2, adf.test, k=12))
do.call(rbind, apply(diff_data[,-1], 2, Box.test, lag = 12, type = "Ljung-Box")) %>%
.[,1:3]
ts_plot(data, vars=colnames(diff_data)[-1], start=c(1994,6))
par(mfrow=c(2,3))
ts_plot(data, vars=colnames(diff_data)[-1], start=c(1994,6)) #excluding date variable
par(mfrow=c(3,2))
ts_plot(data, vars=colnames(diff_data)[-1], start=c(1994,6)) #excluding date variable
ts_plot(data, vars=colnames(diff_data)[-1], start=c(1994,6)) #excluding date variable
par(mfrow=c(3,2))
ts_plot(data, vars=colnames(diff_data)[-1], start=c(1994,6)) #excluding date variable
#adf_tests for diff_data
do.call(rbind, apply(diff_data[,-1], 2, adf.test, k=12))
do.call(rbind, apply(diff_data[,-1], 2, adf.test, k=12))[-c(1,2),c(1,4)]
#adf_tests for diff_data
do.call(rbind, apply(diff_data[,-1], 2, adf.test, k=12))[-c(1,2),c(1,4)] %>%
xtable(caption="ADF tests for the differenced data",
label="adf_table", digits=c(0,2)) %>%
print(caption.placement="top", table.placement="H")
#adf_tests for diff_data
do.call(rbind, apply(diff_data[,-1], 2, adf.test, k=12))[-c(1,2),c(1,4)] %>%
xtable(caption="ADF tests for the differenced data",
label="adf_table") %>%
print(caption.placement="top", table.placement="H")
#adf and pp test
do.call(rbind, apply(data[,-1], 2, adf.test))[-c(1,2),c(1,4)] %>%
xtable(caption="ADF tests)",
label="adf_table_non_diff") %>%
print(caption.placement="top", table.placement="H")
do.call(rbind, apply(data[,-1], 2, adf.test))[-c(1,2),c(1,4)]
do.call(rbind, apply(data[,-1], 2, adf.test, k=12))
auto.arima(data$us_PCE)
adf.test(data$us_PCE)
adf.test(data$us_PCE, k=12)
pp.test(data$us_PCE)
adf.test(data$us_CPI)
adf.test(data$us_interest)
adf.test(data$us_PCE)
set.seed(1337)
swe_tests_diff <- causal_null_parallel(Y = diff_data$swe_CPI, A=diff_data$swe_interest, W=diff_data$swe_unemployment,
lags = c(0:3), control = list(cross.fit = TRUE, verbose=TRUE), p=Inf)
do.call(rbind, apply(data[,-1], 2, adf.test, k=6))[-c(1,2),c(1,4)]
do.call(rbind, apply(data[,-1], 2, adf.test, k=12))[-c(1,2),c(1,4)]
data <- data %>% rename(CPIF = KPIF)
data <- data %>% rename(swe_CPIF = swe_KPIF)
View(data)
do.call(rbind, apply(data[,-1], 2, Box.test, lag = 12, type = "Ljung-Box")) %>%
.[,1:3] %>%
xtable(caption="Ljung-Box test for white noise",
label="ljung_box_table", digits=c(0,0,0,2)) %>%
print(caption.placement="top", table.placement="H")
#adf and pp test
do.call(rbind, apply(data[,-1], 2, adf.test, k=12))[-c(1,2),c(1,4)] %>%
xtable(caption="ADF tests)",
label="adf_table_non_diff") %>%
print(caption.placement="top", table.placement="H")
colnames(data)
par(mfrow=c(2,3))
ts_plot(data, vars=colnames(data)[1:3], start=c(1994,6))
par(mfrow=c(2,3))
ts_plot(data, vars=colnames(data)[-c(1:3)], start=c(1994,6))
par(mfrow=c(2,3))
ts_plot(data, vars=colnames(data)[-c(1:3)], start=c(1994,6))
par(mfrow=c(2,3))
ts_plot(data, vars=colnames(data)[-c(1:3)], start=c(1994,6))
par(mfrow=c(3,2))
ts_plot(data, vars=colnames(data)[-c(1:3)], start=c(1994,6))
lapply(swe_diff_np_lc, np.plot))
lapply(swe_diff_np_lc, np.plot)
source("G:/Min enhet/GitHub/Thesis/code.R", echo=TRUE)
np.plot(swe_diff_np, view="fixed", theta=seq(0,35,5), phi=seq(0,35,5))
View(data)
set.seed(1337)
#this is equivalent to performing the function ctsCausal::causalNullTest() 4 times with different lags of the interest rate
swe_tests_diff <- causal_null_parallel(Y = diff_data$swe_KPIF, A=diff_data$swe_interest, W=diff_data$swe_unemployment,
lags = c(0:3), control = list(cross.fit = TRUE, verbose=TRUE), p=Inf)
#causal null tests
set.seed(1337)
#this is equivalent to performing the function ctsCausal::causalNullTest() 4 times with different lags of the interest rate
swe_tests_diff <- causal_null_parallel(Y = diff_data$swe_CPIF, A=diff_data$swe_interest, W=diff_data$swe_unemployment,
lags = c(0:3), control = list(cross.fit = TRUE, verbose=TRUE), p=Inf)
View(diff_data)
do.call(rbind, apply(data[,-1], 2, pp.test))
#adf and pp test
do.call(rbind, apply(data[,-1], 2, adf.test, k=12))[-c(1,2),c(1,4)] %>%
xtable(caption="ADF tests)",
label="adf_table_non_diff") %>%
print(caption.placement="top", table.placement="H")
diff_data <- apply(data[,-(1)], 2, FUN= function(x) diff(x,1))
diff_data <- tibble(data.frame(data$Date[-1], diff_data))
colnames(diff_data) <- colnames(data)
View(diff_data)
set.seed(1337)
#this is equivalent to performing the function ctsCausal::causalNullTest() 4 times with different lags of the interest rate
swe_tests_diff <- causal_null_parallel(Y = diff_data$swe_CPIF, A=diff_data$swe_interest, W=diff_data$swe_unemployment,
lags = c(0:3), control = list(cross.fit = TRUE, verbose=TRUE), p=Inf)
us_tests_diff <- causal_null_parallel(Y = diff_data$us_PCE, A=diff_data$us_interest, W=diff_data$us_unemployment,
lags = c(0:3), control = list(cross.fit = TRUE, verbose=TRUE), p=Inf)
print(xtable(swe_res_table, caption="Causal null tests for the swedish data",
label="swe_causal_null_table"), caption.placement="top", table.placement="H")
print(xtable(swe_tests_diff, caption="Causal null tests for the swedish data",
label="swe_causal_null_table"), caption.placement="top", table.placement="H")
print(xtable(swe_tests_diff, caption="Causal null tests for the swedish data",
label="swe_causal_null_table"), caption.placement="top", table.placement="H")
swe_tests_diff
do.call(rbind,swe_tests_diff) %>%
xtable(caption="Causal null tests for the swedish data",
label="swe_causal_null_table") %>%
print(caption.placement="top", table.placement="H")
do.call(rbind,swe_tests_diff)
View(swe_tests_diff)
#parallel version of the causall_null_multi function
causal_null_parallel <- function(Y, A, W, lags, control = list(cross.fit = FALSE,
verbose=TRUE, g.n.bins = 2:5), p=2){
n_cores <- parallel::detectCores()- 1 #saving 1 core for OS
print("cores done")
cl <- makeCluster(n_cores)
clusterExport(cl, c("Y", "A", "W", "lags", "control", "p"), envir=environment())
print("export done")
clusterEvalQ(cl, {
library(tidyverse)
library(ctsCausal)
source("functions.R") # Ensure this file is in the working directory
})
print("starting parsapply")
results_list <- parSapply(cl, lags, FUN=function(lag){
res <- causal_wrapper(Y, A, W, lag, control, p=p)
return(res)},
simplify=FALSE)
names(results_list) <- paste("lag", lags)
stopCluster(cl)
return(results_list)
}
set.seed(1337)
#this is equivalent to performing the function ctsCausal::causalNullTest() 4 times with different lags of the interest rate
swe_tests_diff <- causal_null_parallel(Y = diff_data$swe_CPIF, A=diff_data$swe_interest, W=diff_data$swe_unemployment,
lags = c(0:3), control = list(cross.fit = TRUE, verbose=TRUE), p=Inf)
set.seed(1337)
#this is equivalent to performing the function ctsCausal::causalNullTest() 4 times with different lags of the interest rate
swe_tests_diff <- causal_null_parallel(Y = diff_data$swe_CPIF, A=diff_data$swe_interest, W=diff_data$swe_unemployment,
lags = c(0:3), control = list(cross.fit = TRUE, verbose=TRUE), p=Inf)
#causal null tests
set.seed(1337)
#this is equivalent to performing the function ctsCausal::causalNullTest() 4 times with different lags of the interest rate
swe_tests_diff <- causal_null_parallel(Y = diff_data$swe_CPIF, A=diff_data$swe_interest, W=diff_data$swe_unemployment,
lags = c(0:3), control = list(cross.fit = TRUE, verbose=TRUE), p=Inf)
View(diff_data)
#causal null tests
set.seed(1337)
#this is equivalent to performing the function ctsCausal::causalNullTest() 4 times with different lags of the interest rate
swe_tests_diff <- causal_null_multi(Y = diff_data$swe_CPIF, A=diff_data$swe_interest, W=diff_data$swe_unemployment,
lags = c(0:3), control = list(cross.fit = TRUE, verbose=TRUE), p=Inf)
causal_null_multi <- function(Y, A, W, lags, control = list(cross.fit = FALSE,
verbose=TRUE, g.n.bins = 2:5), p=2){
res <- sapply(lags, FUN=function(lag){
cat("current lag is", lag, fill = TRUE)
causal_wrapper(Y, A, W, lag, control, p=p)
})
names(res) <- paste("lag", lags)
return(res)
}
#causal null tests
set.seed(1337)
#this is equivalent to performing the function ctsCausal::causalNullTest() 4 times with different lags of the interest rate
swe_tests_diff <- causal_null_multi(Y = diff_data$swe_CPIF, A=diff_data$swe_interest, W=diff_data$swe_unemployment,
lags = c(0:3), control = list(cross.fit = TRUE, verbose=TRUE), p=Inf)
causal_null_multi(Y = diff_data$swe_CPIF, A=diff_data$swe_interest, W=diff_data$swe_unemployment,
lags = c(0:3), control = list(cross.fit = TRUE, verbose=TRUE), p=Inf)
#function based on the causalNullTest() from ctscausal package.
#given arguments Y, A, W, control, it performs the causal null test
# for the argument A, take the lag of the variable depending on specified lag length as annother argument
#it also needs to adjust the length of the Y variable and W variable to match the lagged A variable
#its assumed that the number of observaitons for all variables with no lag is the same
#the function returns the results of the causal null test for the lagged variable
causal_wrapper <- function(Y, A, W, lag, control, p){
stopifnot("Invalid lag" = (is.numeric(lag) && lag >=0))
stopifnot("Y and A length differ" = (length(Y) == length(A)))
stopifnot("Y and W length differ" = (length(Y) == length(W)))
if (lag == 0) {
results <- causalNullTest(Y = Y, A=A, W=data.frame(W), control=control, p=p)
} else {
results <- causalNullTest(Y = Y[1:(length(Y)-lag)], A=A[(1+lag):length(A)],
W=data.frame(W[1:(length(W) - lag)]),
control=control, p=p)
}
return(results)
}
causal_null_multi <- function(Y, A, W, lags, control = list(cross.fit = TRUE,
verbose=TRUE), p=Inf){
res <- sapply(lags, FUN=function(lag){
cat("current lag is", lag, fill = TRUE)
causal_wrapper(Y, A, W, lag, control, p=p)
})
names(res) <- paste("lag", lags)
return(res)
}
#this is equivalent to performing the function ctsCausal::causalNullTest() 4 times with different lags of the interest rate
swe_tests_diff <- causal_null_multi(Y = diff_data$swe_CPIF, A=diff_data$swe_interest, W=diff_data$swe_unemployment,
lags = c(0:3), control = list(cross.fit = TRUE, verbose=TRUE), p=Inf)
diff_data$swe_interest
debug(causal_null_multi)
#this is equivalent to performing the function ctsCausal::causalNullTest() 4 times with different lags of the interest rate
swe_tests_diff <- causal_null_multi(Y = diff_data$swe_CPIF, A=diff_data$swe_interest, W=diff_data$swe_unemployment,
lags = c(0:3), control = list(cross.fit = TRUE, verbose=TRUE), p=Inf)
debug(causalNullTest)
warnings()
stopCluster(cl)
stopCluster()
#this is equivalent to performing the function ctsCausal::causalNullTest() 4 times with different lags of the interest rate
swe_tests_diff <- causal_null_multi(Y = diff_data$swe_CPIF, A=diff_data$swe_interest, W=diff_data$swe_unemployment,
lags = c(0:3), control = list(cross.fit = TRUE, verbose=TRUE), p=Inf)
#this is equivalent to performing the function ctsCausal::causalNullTest() 4 times with different lags of the interest rate
swe_tests_diff <- causal_null_parallel(Y = diff_data$swe_CPIF, A=diff_data$swe_interest, W=diff_data$swe_unemployment,
lags = c(0:3), control = list(cross.fit = TRUE, verbose=TRUE), p=Inf)
swe_tests_diff
#causal null tests
set.seed(1337)
#this is equivalent to performing the function ctsCausal::causalNullTest() 4 times with different lags of the interest rate
swe_tests_diff <- causal_null_parallel(Y = diff_data$swe_CPIF, A=diff_data$swe_interest, W=diff_data$swe_unemployment,
lags = c(0:3), control = list(cross.fit = TRUE, verbose=TRUE), p=Inf)
swe_tests_diff
unlist(swe_tests_diff)
do.call(rbind, swe_tests_diff)
us_tests_diff <- causal_null_parallel(Y = diff_data$us_PCE, A=diff_data$us_interest, W=diff_data$us_unemployment,
lags = c(0:3), control = list(cross.fit = TRUE, verbose=TRUE), p=Inf)
us_tests_diff
do.call(rbind, lapply(swe_tests_diff), function(x) x$test)
do.call(rbind, lapply(swe_tests_diff, function(x) x$test))
do.call(rbind, lapply(swe_tests_diff, function(x) x$test)) %>%
round(2)
do.call(rbind, lapply(swe_tests_diff, function(x) x$test)) %>%
round(2) %>%
xtable(caption="Causal null tests for the differenced data",
label="causal_null_table") %>%
print(caption.placement="top", table.placement="H")
swe_formula <- swe_CPIF ~ swe_interest + swe_unemployment
swe_diff_np <- np_parallel(formula=swe_formula, lag_var1 = "swe_interest", lag_var2 = "swe_unemployment",
lags1= c(1:3), lags2=c(1:3),
replace_lag_0 = TRUE, data=diff_data, regtype="ll")
lapply(swe_diff_np_lc, np.plot)
np.plot(swe_diff_np$`swe_unemployment lag = 1`)
plot(swe_diff_np$`swe_unemployment lag = 1`$`swe_interest lag = 1`$model)
detach("package:ctsCausal", unload = TRUE)
swe_diff_np <- np_parallel(formula=swe_formula, lag_var1 = "swe_interest", lag_var2 = "swe_unemployment",
lags1= c(1:3), lags2=c(1:3),
replace_lag_0 = TRUE, data=diff_data, regtype="ll")
plot(swe_diff_np$`swe_unemployment lag = 1`$`swe_interest lag = 1`$model)
do.call(rbind, lapply(us_tests_diff, function(x) x$test)) %>%
round(2) %>%
xtable(caption="Causal null tests for the differenced data",
label="causal_null_table") %>%
print(caption.placement="top", table.placement="H")
do.call(rbind, lapply(swe_tests_diff, function(x) x$test)) %>%
round(2) %>%
xtable(caption="Causal null tests for the swedish differenced data",
label="causal_null_table") %>%
print(caption.placement="top", table.placement="H")
do.call(rbind, lapply(us_tests_diff, function(x) x$test)) %>%
round(2) %>%
xtable(caption="Causal null tests for the US differenced data",
label="causal_null_table") %>%
print(caption.placement="top", table.placement="H")
