list_results <- np_wrapper(new_formula, data=data)
}
return(list_results)
}
np_multi <- function(formula, data,lag_var, lags, replace_lag_0=TRUE, single_lag = TRUE, regtype="ll", ...){
if(missing(lags)){ #this is the case where we do not lag any variable
list_results <- np_wrapper(formula=formula, data=data, regtype=regtype,...)
} else if(single_lag){ #this case for when we use each lag separately in new models
list_results <- sapply(lags, FUN=function(lag){
cat("current lag is ", lag, fill=TRUE)
if(lag==0){
new_formula <- formula
} else{
new_formula <-  add_lag_to_formula(formula,lag=lag, lag_var=lag_var, replace_lag_0)
}
results <- np_wrapper(formula = new_formula, data=data)
}, simplify = FALSE)
list_names <- sapply(lags, FUN=function(lag_length){paste0("lag=",lag_length)})
list_results <- setNames(list_results, list_names)
}else{ #this case for when all lags in the same model
new_formula <- add_lag_to_formula(formula,lag_var, lags, replace_lag_0)
list_results <- np_wrapper(new_formula, data=data)
}
return(list_results)
}
us_results_test <- np_multi(formula=us_formula, lag_var = "us_interest", lags = c(0:2) ,
replace_lag_0 = TRUE, single_lag=TRUE, data=data, regtype="lc")
View(us_test_result3)
View(us_results_test)
us_results_test$`lag=0`$model$pregtype
np_multi <- function(formula, data,lag_var, lags, replace_lag_0=TRUE,
single_lag = TRUE, regtype="ll", ...){
if(missing(lags)){ #this is the case where we do not lag any variable
list_results <- np_wrapper(formula=formula, data=data, regtype=regtype,...)
} else if(single_lag){ #this case for when we use each lag separately in new models
list_results <- sapply(lags, FUN=function(lag){
cat("current lag is ", lag, fill=TRUE)
if(lag==0){
new_formula <- formula
} else{
new_formula <-  add_lag_to_formula(formula,lag=lag, lag_var=lag_var, replace_lag_0)
}
results <- np_wrapper(formula = new_formula, data=data, regtype=regtype, ...)
}, simplify = FALSE)
list_names <- sapply(lags, FUN=function(lag_length){paste0("lag=",lag_length)})
list_results <- setNames(list_results, list_names)
}else{ #this case for when all lags in the same model
new_formula <- add_lag_to_formula(formula,lag_var, lags, replace_lag_0)
list_results <- np_wrapper(new_formula, data=data, regtype=regtype, ...)
}
return(list_results)
}
us_results_test <- np_multi(formula=us_formula, lag_var = "us_interest", lags = c(0:2) ,
replace_lag_0 = TRUE, single_lag=TRUE, data=data, regtype="lc")
us_results_test$`lag=0`$model$pregtype
us_results_test$`lag=1`$model$pregtype
us_test_results$pregtype
us_results_test <- np_multi(formula=us_formula, lag_var = "us_interest", lags = c(0:2) ,
replace_lag_0 = TRUE, single_lag=TRUE, data=data, regtype="lc")
us_results_test$`lag=0`$model$pregtype
debug(npreg)
us_results_test <- np_multi(formula=us_formula, lag_var = "us_interest", lags = c(0:2) ,
replace_lag_0 = TRUE, single_lag=TRUE, data=data, regtype="lc")
args
#wrapper function for npreg and npsigtest functions to perform them given formula
#and save results in a list
np_wrapper <- function(formula, data,regtype="ll"){
np_model <- npreg(formula, gradients=TRUE, regtype=regtype, data=data)
sign_test <- npsigtest(np_model)
list_results <- list("model"=np_model, "sign_test" = sign_test)
return(list_results)
}
np_multi <- function(formula, data,lag_var, lags, replace_lag_0=TRUE,
single_lag = TRUE, regtype="ll", ...){
if(missing(lags)){ #this is the case where we do not lag any variable
list_results <- np_wrapper(formula=formula, data=data, regtype=regtype,...)
} else if(single_lag){ #this case for when we use each lag separately in new models
list_results <- sapply(lags, FUN=function(lag){
cat("current lag is ", lag, fill=TRUE)
if(lag==0){
new_formula <- formula
} else{
new_formula <-  add_lag_to_formula(formula,lag=lag, lag_var=lag_var, replace_lag_0)
}
results <- np_wrapper(formula = new_formula, data=data, regtype=regtype)
}, simplify = FALSE)
list_names <- sapply(lags, FUN=function(lag_length){paste0("lag=",lag_length)})
list_results <- setNames(list_results, list_names)
}else{ #this case for when all lags in the same model
new_formula <- add_lag_to_formula(formula,lag_var, lags, replace_lag_0)
list_results <- np_wrapper(new_formula, data=data, regtype=regtype)
}
return(list_results)
}
np_multi <- function(formula, data,lag_var, lags, replace_lag_0=TRUE,
single_lag = TRUE, regtype="ll"){
if(missing(lags)){ #this is the case where we do not lag any variable
list_results <- np_wrapper(formula=formula, data=data, regtype=regtype,...)
} else if(single_lag){ #this case for when we use each lag separately in new models
list_results <- sapply(lags, FUN=function(lag){
cat("current lag is ", lag, fill=TRUE)
if(lag==0){
new_formula <- formula
} else{
new_formula <-  add_lag_to_formula(formula,lag=lag, lag_var=lag_var, replace_lag_0)
}
results <- np_wrapper(formula = new_formula, data=data, regtype=regtype)
}, simplify = FALSE)
list_names <- sapply(lags, FUN=function(lag_length){paste0("lag=",lag_length)})
list_results <- setNames(list_results, list_names)
}else{ #this case for when all lags in the same model
new_formula <- add_lag_to_formula(formula,lag_var, lags, replace_lag_0)
list_results <- np_wrapper(new_formula, data=data, regtype=regtype)
}
return(list_results)
}
us_results_test <- np_multi(formula=us_formula, lag_var = "us_interest", lags = c(0:2) ,
replace_lag_0 = TRUE, single_lag=TRUE, data=data, regtype="lc")
undebug(npreg)
us_results_test <- np_multi(formula=us_formula, lag_var = "us_interest", lags = c(0:2) ,
replace_lag_0 = TRUE, single_lag=TRUE, data=data, regtype="lc")
us_results_test$`lag=0`$model
us_results_test$`lag=1`$model
np.plot(us_results_test)
us_results_test <- np_multi(formula=us_formula, lag_var = "us_interest", lags = c(0:6,12) ,
replace_lag_0 = TRUE, single_lag=TRUE, data=data, regtype="lc")
np.plot(us_results_test, view="fixed", theta=seq(0,35,5), phi=seq(0,35,5)
)
swe_results_test <- np_multi(formula=swe_formula, lag_var = "swe_interest", lags = c(0:6,12) ,
replace_lag_0 = TRUE, single_lag=TRUE, data=data, regtype="lc")
# Define the formula
swe_formula <- swe_CPI ~ swe_interest + swe_unemployment
plot(us_test_results, view="fixed")
plot(us_test_result3, view="fixed")
swe_results_test <- np_multi(formula=swe_formula, lag_var = "swe_interest", lags = c(0:6,12) ,
replace_lag_0 = TRUE, single_lag=TRUE, data=data, regtype="lc")
np.plot(swe_results_test, view="fixed", theta=seq(0,35,5), phi=seq(0,35,5)
np.plot(swe_results_test, view="fixed", theta=seq(0,35,5), phi=seq(0,35,5))
np.plot(swe_results_test, view="fixed", theta=seq(0,35,5), phi=seq(0,35,5))######## manual coding mostly for testing, can be ignored #######
us_results <- np_multi(formula=us_formula, lag_var = "us_interest", lags = c(0:6, 12) ,
replace_lag_0 = TRUE, single_lag=TRUE, data=data)
us_results <- np_multi(formula=us_formula, lag_var = "us_interest", lags = c(0:6, 12) ,
replace_lag_0 = TRUE, single_lag=TRUE, data=data, regtype="ll")
np.plot(us_results)
test_formula <- us_CPI ~ us_interest + lag(us_unemployment,3)
us_results_test <- np_multi(formula=us_formula, lag_var = "us_interest", lags = c(0:6,12) ,
replace_lag_0 = TRUE, single_lag=TRUE, data=data, regtype="lc")
us_results_test <- np_multi(formula=test_formula, lag_var = "us_interest", lags = c(0:6,12) ,
replace_lag_0 = TRUE, single_lag=TRUE, data=data, regtype="lc")
np.plot(us_results_test)
us_results_test$`lag=0`$model
#testing with local constant estimator
us_results_test <- np_multi(formula=test_formula, lag_var = "us_interest", lags = c(0:6,12) ,
replace_lag_0 = TRUE, single_lag=TRUE, data=data, regtype="ll")
np.plot(us_results_test, view="fixed", theta=seq(0,35,5), phi=seq(0,35,5))
np.plot(us_results, view="fixed", theta=seq(0,35,5), phi=seq(0,35,5))
View(us_results_test)
View(us_test_results)
View(data)
new_data <- data %>%
mutate(quarter = quarter(date)) %>%
group_by(quarter) %>%
summarise_all(mean) %>%
ungroup() %>%
select(-date)
new_data <- data %>%
mutate(quarter = rep(1:24, each=3)) %>%
group_by(quarter) %>%
summarise_all(mean) %>%
ungroup() %>%
select(-date)
rep(1:24, 3)
str(data)
# Convert the 'Date' column to Date class, assuming it's in "YYYY-MM" format
data_new <- data %>%
mutate(Date = as.Date(paste0(Date, "-01")))
View(data_new)
# Convert the 'Date' column to Date class, assuming it's in "YYYY-MM" format
data_new <- data %>%
mutate(Date = as.Date(paste0(Date, "-01")))
View(data_new)
View(data)
# Create a new column for quarter and year
data_new <- data_new %>%
mutate(Year = year(Date),
Quarter = quarter(Date))
View(data_new)
# Group by Year and Quarter and calculate the average for each variable
data_quarterly <- data_new %>%
group_by(Year, Quarter) %>%
summarise(across(c(swe_CPI, us_CPI, us_interest, swe_interest, us_unemployment, swe_unemployment), mean, na.rm = TRUE)) %>%
ungroup()
View(data_quarterly)
mean(data$swe_CPI[1:3])
mean(data$swe_CPI[4:6])
View(data)
mean(data$swe_interest[1:3])
mean(data$swe_interest[4:6])
data_quarterly <- data_new %>%
group_by(Year, Quarter)
ata %>%
group_by(Year, Quarter)
data_new %>%
group_by(Year, Quarter)
data_new %>%
group_by(Year, Quarter) %>%
summarise(across(c(swe_CPI, us_CPI, us_interest, swe_interest, us_unemployment, swe_unemployment), mean, na.rm = TRUE))
data$us_CPI[1:3]
mean(data$us_CPI[1:3])
data_new %>%
group_by(Year, Quarter)
View(data_quarterly)
data_quarterly
View(data_quarterly)
# Group by Year and Quarter and calculate the average for each variable
data_quarterly_new <- data_quarterly %>%
group_by(Year, Quarter) %>%
summarise(across(everything(), mean))
View(data_quarterly_new)
data$swe_CPI[1]
data$swe_CPI[2:4]
mean(data$swe_CPI[2:4])
# Group by Year and Quarter and calculate the average for each variable
data_quarterly <- data_new %>%
group_by(Year, Quarter) %>%
summarise(across(c(swe_CPI, us_CPI, us_interest, swe_interest, us_unemployment, swe_unemployment), mean, na.rm = TRUE)) %>%
ungroup()
data_quarterly
View(data_quarterly)
#performing the same tests but with the quartely data
swe_results_quarterly <- np_multi(formula=swe_formula, lag_var = "swe_interest", lags = c(0:3,) ,
replace_lag_0 = TRUE, single_lag=TRUE, data=data_quarterly, regtype="ll")
#performing the same tests but with the quartely data
swe_results_quarterly <- np_multi(formula=swe_formula, lag_var = "swe_interest", lags = c(0:3) ,
replace_lag_0 = TRUE, single_lag=TRUE, data=data_quarterly, regtype="ll")
np.plot(swe_results_quarterly, view="fixed", theta=seq(0,35,5), phi=seq(0,35,5))
np.summary(swe_results_quarterly)
swe_test_quarterly <- causall_null_multi(Y = data_quarterly$swe_CPI, A=data_quarterly$swe_interest, W=data_quarterly$swe_unemployment,
lags = c(0:6, 12), control = list(cross.fit = FALSE, verbose=TRUE, g.n.bins = 2:5))
library(ctsCausal)
swe_test_quarterly <- causall_null_multi(Y = data_quarterly$swe_CPI, A=data_quarterly$swe_interest, W=data_quarterly$swe_unemployment,
lags = c(0:6, 12), control = list(cross.fit = FALSE, verbose=TRUE, g.n.bins = 2:5))
swe_test_quarterly
us_results_quarterly <- np_multi(formula=us_formula, lag_var = "us_interest", lags = c(0:3) ,
replace_lag_0 = TRUE, single_lag=TRUE, data=data_quarterly, regtype="ll")
np.plot(us_results_quarterly, view="fixed", theta=seq(0,35,5), phi=seq(0,35,5)
)
PLOT(data$us_CPI)
plot(data$us_CPI)
setwd("G:/Min enhet/GitHub/Thesis")
library(haven)
library(readxl)
library(readr)
library(dplyr)
library(tidyr)
library(tidyverse)
FED_data <- read.csv("./data/FEDFUNDS.csv")
us_inflation <- read_csv("./data/us_cpi_12_month.csv",skip=0)
riksbanken_data <- read_delim("data/riksbanken_monthly.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
swe_inflation <- read_csv("./data/swedish_CPI.csv",
col_names = FALSE, skip = 3)
us_unemployment <- read_csv("./data/us_unrate_SA.csv")
swe_unemployment <- read_csv("./data/swe_unrate_SA.csv")
FED_data<- FED_data[-c(1:which(FED_data$DATE=="1994-05-01"), 835),]
us_inflation <-us_inflation[which(us_inflation$Label=="1994 Jun"):nrow(us_inflation),
c(4,6)]
colnames(us_inflation) <-  c("Date", "InflationRate")
us_inflation$InflationRate <- as.numeric(us_inflation$InflationRate)
swe_inflation <- swe_inflation[-c(1:173, 529),] %>%
rename(Date = X1, InflationRate = X2)
riksbanken_data <- riksbanken_data[-nrow(riksbanken_data),]
us_unemployment <- us_unemployment[-c(1:which(us_unemployment$DATE =="1994-05-01")),]
swe_unemployment <- swe_unemployment[-c(1:which(swe_unemployment$DATE=="1994-05-01")),] %>%
`colnames<-`(c("Date", "UnemploymentRate"))
#combining the data
data <- seq(as.Date("1994-06-01"), length.out = 355, by = "month") %>%
format("%Y-%m") %>% #date variable
tibble(Date = ., swe_CPI = swe_inflation$InflationRate,
us_CPI = us_inflation$InflationRate, us_interest = FED_data$FEDFUNDS,
swe_interest = as.numeric(gsub(",", ".", riksbanken_data$Medel)),
us_unemployment= us_unemployment$UNRATE,
"swe_unemployment" = swe_unemployment$UnemploymentRate)
#combining the data
data <- seq(as.Date("1994-06-01"), length.out = 355, by = "month")
data %>%
format("%Y-%m") %>% #date variable
tibble(Date = ., swe_CPI = swe_inflation$InflationRate,
us_CPI = us_inflation$InflationRate, us_interest = FED_data$FEDFUNDS,
swe_interest = as.numeric(gsub(",", ".", riksbanken_data$Medel)),
us_unemployment= us_unemployment$UNRATE,
"swe_unemployment" = swe_unemployment$UnemploymentRate)
format(data, "%Y-%m") %>% #date variable
tibble(Date = ., swe_CPI = swe_inflation$InflationRate,
us_CPI = us_inflation$InflationRate, us_interest = FED_data$FEDFUNDS,
swe_interest = as.numeric(gsub(",", ".", riksbanken_data$Medel)),
us_unemployment= us_unemployment$UNRATE,
"swe_unemployment" = swe_unemployment$UnemploymentRate)
# Create the data frame without using pipes
data <- tibble(
Date = formatted_dates,
swe_CPI = swe_inflation$InflationRate,
us_CPI = us_inflation$InflationRate,
us_interest = FED_data$FEDFUNDS,
swe_interest = as.numeric(gsub(",", ".", riksbanken_data$Medel)),
us_unemployment = us_unemployment$UNRATE,
swe_unemployment = swe_unemployment$UnemploymentRate
)
dates <- seq(as.Date("1994-06-01"), length.out = 355, by = "month")
# Format the dates to "YYYY-MM"
formatted_dates <- format(dates, "%Y-%m")
# Create the data frame without using pipes
data <- tibble(
Date = formatted_dates,
swe_CPI = swe_inflation$InflationRate,
us_CPI = us_inflation$InflationRate,
us_interest = FED_data$FEDFUNDS,
swe_interest = as.numeric(gsub(",", ".", riksbanken_data$Medel)),
us_unemployment = us_unemployment$UNRATE,
swe_unemployment = swe_unemployment$UnemploymentRate
)
# Create the data frame without using pipes
data <- tibble(
Date = formatted_dates,
swe_CPI = swe_inflation$InflationRate,
us_CPI = us_inflation$InflationRate,
us_interest = FED_data$FEDFUNDS,
swe_interest = as.numeric(gsub(",", ".", riksbanken_data$Medel)),
us_unemployment = us_unemployment$UNRATE,
swe_unemployment = swe_unemployment$UnemploymentRate
)
seq(as.Date("1994-06-01"), length.out = 355, by = "month") %>%
format("%Y-%m")
seq(as.Date("1994-06-01"), length.out = 355, by = "month")
dates <- seq(as.Date("1994-06-01"), length.out = 355, by = "month") %>%
format("%Y-%m")
dates <- seq(as.Date("1994-06-01"), length.out = 355, by = "month") %>%
# Format the dates to "YYYY-MM"
dates <- format(dates, "%Y-%m")
dates <- seq(as.Date("1994-06-01"), length.out = 355, by = "month") %>%
# Format the dates to "YYYY-MM"
dates <- format(dates, "%Y-%m")
# Create the data frame without using pipes
data <- tibble(
Date = formatted_dates,
swe_CPI = swe_inflation$InflationRate,
us_CPI = us_inflation$InflationRate,
us_interest = FED_data$FEDFUNDS,
swe_interest = as.numeric(gsub(",", ".", riksbanken_data$Medel)),
us_unemployment = us_unemployment$UNRATE,
swe_unemployment = swe_unemployment$UnemploymentRate
)
# Create the data frame without using pipes
data <- tibble(
Date = dates,
swe_CPI = swe_inflation$InflationRate,
us_CPI = us_inflation$InflationRate,
us_interest = FED_data$FEDFUNDS,
swe_interest = as.numeric(gsub(",", ".", riksbanken_data$Medel)),
us_unemployment = us_unemployment$UNRATE,
swe_unemployment = swe_unemployment$UnemploymentRate
)
View(swe_inflation)
library(tidyverse)
library(forecast)
library(stats)
library(psych)
library(xtable)
source("functions.R")
library(haven)
library(readxl)
library(readr)
library(dplyr)
library(tidyr)
library(tidyverse)
FED_data <- read.csv("./data/FEDFUNDS.csv")
us_inflation <- read_csv("./data/us_cpi_12_month.csv",skip=0)
riksbanken_data <- read_delim("data/riksbanken_monthly.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
swe_inflation <- read_csv("./data/swedish_CPI.csv",
col_names = FALSE, skip = 3)
us_unemployment <- read_csv("./data/us_unrate_SA.csv")
swe_unemployment <- read_csv("./data/swe_unrate_SA.csv")
FED_data<- FED_data[-c(1:which(FED_data$DATE=="1994-05-01"), 835),]
us_inflation <-us_inflation[which(us_inflation$Label=="1994 Jun"):nrow(us_inflation),
c(4,6)]
colnames(us_inflation) <-  c("Date", "InflationRate")
us_inflation$InflationRate <- as.numeric(us_inflation$InflationRate)
swe_inflation <- swe_inflation[-c(1:173, 529),] %>%
rename(Date = X1, InflationRate = X2)
swe_inflation[-c(1:173, 529),]
colnames(swe_inflation) <- c("Date", "InflationRate")
riksbanken_data <- riksbanken_data[-nrow(riksbanken_data),]
us_unemployment <- us_unemployment[-c(1:which(us_unemployment$DATE =="1994-05-01")),]
swe_unemployment <- swe_unemployment[-c(1:which(swe_unemployment$DATE=="1994-05-01")),] %>%
`colnames<-`(c("Date", "UnemploymentRate"))
library(tidyverse)
swe_unemployment <- swe_unemployment[-c(1:which(swe_unemployment$DATE=="1994-05-01")),] %>%
`colnames<-`(c("Date", "UnemploymentRate"))
swe_unemployment[-c(1:which(swe_unemployment$DATE=="1994-05-01")),]
swe_unemployment <- swe_unemployment[-c(1:which(swe_unemployment$DATE=="1994-05-01")),] %>%
colnames(swe_unemployment) <- c("Date", "UnemploymentRate")
colnames(swe_unemployment) <- c("Date", "UnemploymentRate")
dates <- seq(as.Date("1994-06-01"), length.out = 355, by = "month")
# Format the dates to "YYYY-MM"
dates <- format(dates, "%Y-%m")
# Create the data frame without using pipes
data <- tibble(
Date = dates,
swe_CPI = swe_inflation$InflationRate,
us_CPI = us_inflation$InflationRate,
us_interest = FED_data$FEDFUNDS,
swe_interest = as.numeric(gsub(",", ".", riksbanken_data$Medel)),
us_unemployment = us_unemployment$UNRATE,
swe_unemployment = swe_unemployment$UnemploymentRate
)
swe_inflation <- swe_inflation[-c(1:173, 529),]
colnames(swe_inflation) <- c("Date", "InflationRate")
library(haven)
library(readxl)
library(readr)
library(dplyr)
library(tidyr)
library(tidyverse)
FED_data <- read.csv("./data/FEDFUNDS.csv")
us_inflation <- read_csv("./data/us_cpi_12_month.csv",skip=0)
riksbanken_data <- read_delim("data/riksbanken_monthly.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
swe_inflation <- read_csv("./data/swedish_CPI.csv",
col_names = FALSE, skip = 3)
us_unemployment <- read_csv("./data/us_unrate_SA.csv")
swe_unemployment <- read_csv("./data/swe_unrate_SA.csv")
FED_data<- FED_data[-c(1:which(FED_data$DATE=="1994-05-01"), 835),]
us_inflation <-us_inflation[which(us_inflation$Label=="1994 Jun"):nrow(us_inflation),
c(4,6)]
colnames(us_inflation) <-  c("Date", "InflationRate")
us_inflation$InflationRate <- as.numeric(us_inflation$InflationRate)
swe_inflation <- swe_inflation[-c(1:173, 529),]
colnames(swe_inflation) <- c("Date", "InflationRate")
riksbanken_data <- riksbanken_data[-nrow(riksbanken_data),]
us_unemployment <- us_unemployment[-c(1:which(us_unemployment$DATE =="1994-05-01")),]
swe_unemployment <- swe_unemployment[-c(1:which(swe_unemployment$DATE=="1994-05-01")),]
dates <- seq(as.Date("1994-06-01"), length.out = 355, by = "month")
# Format the dates to "YYYY-MM"
dates <- format(dates, "%Y-%m")
# Create the data frame without using pipes
data <- tibble(
Date = dates,
swe_CPI = swe_inflation$InflationRate,
us_CPI = us_inflation$InflationRate,
us_interest = FED_data$FEDFUNDS,
swe_interest = as.numeric(gsub(",", ".", riksbanken_data$Medel)),
us_unemployment = us_unemployment$UNRATE,
swe_unemployment = swe_unemployment$UnemploymentRate
)
View(data)
View(swe_unemployment)
View(swe_unemployment)
colnames(swe_unemployment) <- c("Date", "UnemploymentRate")
View(swe_unemployment)
# Create the data frame without using pipes
data <- tibble(
Date = dates,
swe_CPI = swe_inflation$InflationRate,
us_CPI = us_inflation$InflationRate,
us_interest = FED_data$FEDFUNDS,
swe_interest = as.numeric(gsub(",", ".", riksbanken_data$Medel)),
us_unemployment = us_unemployment$UNRATE,
swe_unemployment = swe_unemployment$UnemploymentRate
)
View(data)
#####
#quartlery data
data %>%
mutate(Date = as.Date(paste0(Date, "-01")))
#quartlery data
mutate(data, Date = as.Date(paste0(Date, "-01")))
#quartlery data
mutate(data, Date = as.Date(paste0(Date, "-01"))) %>%
mutate(Year = year(Date),
Quarter = quarter(Date))
#quartlery data
dates_new <- mutate(data, Date = as.Date(paste0(Date, "-01"))) %>%
#mutating the data by merging all months into quarters and taking the average values of all vairables for those months
#this is done to reduce the number of observations and make the data more managable
#starting from the first row, for every three rows we take the average values of all variables
library(dplyr)
#quartlery data
dates_new <- mutate(data, Date = as.Date(paste0(Date, "-01")))
quarters <-   dates_new %>%
mutate(Year = year(Date),
Quarter = quarter(Date))
quarters <-  mutate(dates_new, Year = year(Date),
Quarter = quarter(Date))
#mutating the data by merging all months into quarters and taking the average values of all vairables for those months
#this is done to reduce the number of observations and make the data more managable
#starting from the first row, for every three rows we take the average values of all variables
library(dplyr)
library(lubridate)
View(quarters)
# Group by Year and Quarter and calculate the average for each variable
data_quarterly <-data_quarterly %>%
group_by(Year, Quarter) %>%
summarise(across(c(swe_CPI, us_CPI, us_interest, swe_interest, us_unemployment, swe_unemployment), mean, na.rm = TRUE)) %>%
ungroup()
data_quarterly <-  mutate(dates_new, Year = year(Date),
Quarter = quarter(Date))
# Group by Year and Quarter and calculate the average for each variable
data_quarterly <-data_quarterly %>%
group_by(Year, Quarter) %>%
summarise(across(c(swe_CPI, us_CPI, us_interest, swe_interest, us_unemployment, swe_unemployment), mean, na.rm = TRUE)) %>%
ungroup()
